# -*- mode: org; fill-column: 79; -*-

#+TITLE: On the Lisp Language
#+AUTHOR: WLHarvey4
#+DATE: 2019-01-27 Sun 15:47
#+MACRO: VERSION Version 0.0.4

#+ATTR_HTML: :width 25%
[[./img/lisp-logo.png]]

* Common Lisp

** General Resources

   - [[https://common-lisp.net/][Common-Lisp dot Net]]
   - [[https://www.cliki.net/][CLiki]] --- The Common Lisp Wiki
   - [[https://lisp-lang.org/][Lisp-Lang dot Org]] --- Common Lisp on the Web

     Welcome to =lisp-lang.org=, the new home of Common Lisp on the
     web.  Previously, if someone wanted to learn Common Lisp, the
     language, their best bet was Peter Seibel’s [[http://www.gigamonkeys.com/book/][Practical Common
     Lisp]]. But the book, written in 2005, doesn’t cover setting up a
     modern Common Lisp environment: tools like [[https://www.quicklisp.org/beta/][Quicklisp]] and
     [[http://quickdocs.org/][Quickdocs]] are more recent inventions.

   - [[http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html][Common Lisp the Language (2nd Ed)]] by Guy L. Steele
   - [[http://www-formal.stanford.edu/jmc/][John McCarthy's Home Page]]
   - [[http://www.paulgraham.com/index.html][Paul Graham's Home Page]]
   - [[http://www.lispworks.com/documentation/common-lisp.html][ANSI Common Lisp Standard]]

     The Common Lisp HyperSpec™ is the acclaimed online version of the
     ANSI Common Lisp Standard.  The HyperSpec is derived from the
     official standard [fn:official-standard] with permission from
     ANSI and NCITS (previously known as X3). It contains the full
     text of the ANSI standard and ancillary information.

     #+ATTR_HTML: :textarea t :width 60
     #+BEGIN_EXAMPLE
     INCITS 226-1994[S2008]
     Promotes the portability of Common Lisp programs among a variety
     of data processing systems. It is a language specification aimed
     at an audience of implementors and knowledgeable programmers. It
     is neither a tutorial nor an implementation guide.
     #+END_EXAMPLE

[fn:official-standard] The document ANSI INCITS 226-1994 (formerly
ANSI X3.226:1994) American National Standard for Programming Language
Common LISP is the official standard, available on paper [[http://www.techstreet.com/cgi-bin/detail?product_id=56214][here]]. Here is
a [[http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS+226-1994%255bS2008%255d][PDF version]].

** Common Lisp Implementations

*** Armed Bear Common Lisp

    [[https://common-lisp.net/project/armedbear/][Armed Bear Common Lisp (ABCL)]]

    ABCL is a full implementation of the Common Lisp language
    featuring both an interpreter and a compiler, running in the
    JVM. Originally started to be a scripting language for the J
    editor, it now supports JSR-223 (Java scripting API): it can be a
    scripting engine in any Java application. Additionally, it can be
    used to implement (parts of) the application using Java to Lisp
    integration APIs.

**** FAQ

     [[https://common-lisp.net/project/armedbear/faq.shtml][Frequently Asked Questions]]

*** Steel Bank Common Lisp

    [[https://common-lisp.net/project/armedbear/][Steel Bank Common Lisp (SBCL)]] \diamond [[http://www.sbcl.org/manual/index.html][Online Manual]]

    SBCL is a high performance Common Lisp compiler. It is open source
    free software, with a permissive license. In addition to the
    compiler and runtime system for ANSI Common Lisp, it provides an
    interactive environment including a debugger, a statistical
    profiler, a code coverage tool, and many other extensions. SBCL
    runs on a number of POSIX platforms, and experimentally on
    Windows.

    [[http://www.sbcl.org/platform-table.html][Download Page]] The most recent version of SBCL is 1.4.16, released January
    26, 2019.  New SBCL versions are usually released at the end of each month.

    [[http://www.sbcl.org/getting.html][Getting Started]]

*** Clozure Common Lisp

    [[https://ccl.clozure.com/][Clozure Common Lisp (CCL)]]

    CCL s a free Common Lisp implementation with a long history. Some
    distinguishing features of the implementation include fast
    compilation speed, native threads, a precise, generational,
    compacting garbage collector, and a convenient foreign-function
    interface.

*** Embeddable Common Lisp

    [[https://common-lisp.net/project/ecl/main.html][Embeddable Common Lisp (ECL)]]

    ECL is an interpreter of the Common-Lisp language as described in
    the X3J13 Ansi specification, featuring CLOS (Common-Lisp Object
    System), conditions, loops, etc, plus a translator to C, which can
    produce standalone executables.

    ECL supports the operating systems Linux, FreeBSD, NetBSD,
    OpenBSD, OS X, Solaris and Windows, running on top of the Intel,
    Sparc, Alpha, PowerPC and ARM processors.

*** Clasp

    [[https://github.com/clasp-developers/clasp][Clasp]]

    Clasp is a new Common Lisp implementation that seamlessly
    interoperates with C++ libraries and programs using LLVM for
    compilation to native code. This allows Clasp to take advantage of
    a vast array of preexisting libraries and programs, such as out of
    the scientific computing ecosystem. Embedding them in a Common
    Lisp environment allows you to make use of rapid prototyping,
    incremental development, and other capabilities that make it a
    powerful language.

*** CLISP

    [[https://clisp.sourceforge.io/][CLISP]]

    GNU CLISP is a Common Lisp implementation by Bruno Haible, then of
    Karlsruhe University, and Michael Stoll, then of Munich
    University, both in Germany. It implements the language described
    in the ANSI Common Lisp standard with many extensions.

** Writings on Lisp

   - [[http://www-formal.stanford.edu/jmc/recursive.html][Recursive Functions of Symbolic Expressions and Their Computation
     by Machine, Part I]]
     - John McCarthy, Massachusetts Institute of Technology,
       Cambridge, Mass., April 1960
   - [[http://www-formal.stanford.edu/jmc/lisp20th.html][Lisp---Notes on its Past and Future]]
     - John McCarthy, 1980
   - [[http://www.paulgraham.com/onlisp.html][On Lisp]]
     - Paul Graham, 1993--- An in-depth treatment of macros, but not recommended
       as a first Common Lisp book, since it is slightly pre-ANSI so you need
       to be on your guard against non-standard usages, and since it doesn’t
       really even try to cover the language as a whole, focusing solely on
       macros.
   - [[http://www.gigamonkeys.com/book/][Practical Common Lisp]]
     - Peter Seibel---
       An excellent introduction to the language, covering both the basics and
       “advanced topics” like macros, CLOS, and packages. Available both in
       print format and on the web.
       - Source Files :: [[./PracticalCL/practicals-1.0.3/]]
   - Object-Oriented Programming In Common Lisp
     - Sonya Keene, 1989--- With the exception of Practical Common Lisp most
       introductory books don’t emphasize CLOS. This one does. Even if you’re
       very knowledgeable about object oriented programming in the abstract,
       it’s worth looking at this book if you want to do any OO in Common
       Lisp. Some abstractions in CLOS (especially multiple dispatch) go
       beyond anything you’ll see in most OO systems, and there are a number
       of lesser differences as well. This book tends to help with the culture
       shock.
   - Art Of Metaobject Programming
     - Gregor Kiczales et al.
   - [[https://github.com/norvig/paip-lisp][Paradigms Of Artificial Intelligence Programming]]
     - Peter Norvig, 1992--- Good information on general Common Lisp
       programming, and many nontrivial examples. Whether or not your work is
       AI, it’s a very good book to look at.  This is an open-source repository
       for the book /Paradigms of Artificial Intelligence Programming: Case
       Studies in Common Lisp/ by Peter Norvig (1992), and the code contained
       therein. The copyright has reverted to the author, who has shared it
       here under MIT license.


** Derived Works of Lisp

*** Scheme

    - [[https://www.scheme.com/tspl4/][The Scheme Programming Language]] (2009 4th Edition) by R. Kent Dybvig
    - [[https://racket-lang.org/][The Racket Programming Language]]
    - [[https://clojure.org/][The Clojure Programming Language]]

** Emacs

*** SLIME The Superior Lisp Interaction Mode for Emacs

    SLIME extends Emacs with support for interactive programming in Common
    Lisp. The features are centered around =slime-mode=, an Emacs minor-mode
    that complements the standard =lisp-mode=. While =lisp-mode= supports
    editing Lisp source files, =slime-mode= adds support for interacting with a
    running Common Lisp process for compilation, debugging, documentation
    lookup, and so on.

    [[https://common-lisp.net/project/slime/doc/html/][SLIME Manual]]

    [[https://www.common-lisp.net/project/slime/][SLIME Home]]

    [[https://github.com/slime/slime][SLIME GitHub Page]]

**** Quick Setup

     1. Setup [[https://melpa.org/#/getting-started][MELPA]] repository
     2. Install SLIME using:
        : M-x package-install RET slime RET
     3. Add the following lines to your ~/.emacs file:

     #+BEGIN_SRC lisp -n
     ;; Set your lisp system and, optionally, some contribs
     (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
     (setq slime-contribs '(slime-fancy))
     #+END_SRC

     4. [@4]Fire up and connect to an inferior Lisp:
        : M-x slime
     5. SLIME will now automatically be available in your Lisp source buffers.
     6. SLIME comes with additional contributed packages or
        "contribs". Contribs can be selected via the =slime-contribs= list.
        - The most-often used contrib is ~slime-fancy~, which primarily
          installs a popular set of other contributed packages. It includes a
          better REPL, and many more nice features.

**** Features

     - Slime Mode :: An Emacs minor-mode to enhance lisp-mode with:
       - Code evaluation, compilation, and macroexpansion.
       - Online documentation (~describe~, ~apropos~, ~hyperspec~).
       - Definition finding (aka Meta-Point aka ~M-~.).
       - Symbol and package name completion.
       - Automatic macro indentation based on ~&body~.
       - Cross-reference interface (WHO-CALLS, etc).
       - ... and more.
     - SLDB :: Common Lisp debugger with an Emacs-based user interface.
     - REPL :: The Read-Eval-Print Loop ("top-level") is written in Emacs Lisp
               for tighter integration with Emacs. The REPL also has builtin
               "shortcut" commands similar those of the McCLIM listener.
     - Compilation Notes :: SLIME is able to take compiler messages and
          annotate them directly into source buffers.
     - Inspector :: Interactive object-inspector in an Emacs buffer.

**** Resources

     [[https://www.common-lisp.net/project/slime/doc/html/][HTML Manual]] \diamond [[https://www.common-lisp.net/project/slime/doc/slime.pdf][PDF Manual]]

     Marco Baringer's [[https://www.youtube.com/watch?v=NUpAvqa5hQw][SLIME tutorial]] from 2005

     Baggers' [[https://www.youtube.com/watch?v=sBcPNr1CKKw][Emacs with SLIME]] — Really useful keyboard shortcuts from 2014.

* HTML EXPORT SETUP                                                :noexport:
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:t tex:t H:5 ':t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:
