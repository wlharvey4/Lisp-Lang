# -*- mode: org; fill-column: 79; -*-

#+TITLE: On the Lisp Language
#+AUTHOR: WLHarvey4
#+DATE: 2019-02-02 Sat 23:13
#+MACRO: VERSION Version 0.0.12

#+ATTR_HTML: :width 25%
[[file:img/440px-Lisplogo.png]]

#+BEGIN_QUOTE
"/Lisp wasn't designed to fix the mistakes in Fortran; it came about more as
the byproduct of an attempt to axiomatize computation./" --- Paul Graham, What
Made Lisp Different

"/LISP will become obsolete when someone makes a more comprehensive language
that dominates LISP practically and also gives a clear mathematical semantics
to a more comprehensive set of features./" --- John McCarthy, History of
Lisp---Conclusions

"/But there is a contradiction in the conventional wisdom: Lisp will make you a
better programmer, and yet you won't use it./" --- Paul Graham, /Want to Start a
Startup?/
#+END_QUOTE

#+BEGIN_SRC lisp -n :tangle src/hello-world.lisp :exports both :results output
;#! /usr/bin/env sbcl --script
(defun hello-world ()
  (format t "Hello, World!~%"))
(hello-world)
#+END_SRC

#+RESULTS:
: Hello, World!

* LISP

  /[[https://aiplaybook.a16z.com/reference-material/mccarthy-1960.pdf][Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I]]/
  - John McCarthy 1960
    - [[http://www-formal.stanford.edu/jmc/recursive/recursive.html][HTML Format]] (linked from [[http://www-formal.stanford.edu/jmc/][McCarthy's Home Page]])
    - [[http://edge.cs.drexel.edu/regli/Classes/Lisp_papers/McCarthy-original-LISP-paper-recursive.pdf][LaTeXed Format]]

    #+ATTR_HTML: :textarea t :width 60
    #+BEGIN_EXAMPLE
    In 1960, John McCarthy published a remarkable paper in which he did for
    programming something like what Euclid did for geometry. He showed how,
    given a handful of simple operators and a notation for functions, you can
    build a whole programming language. He called this language Lisp, for "List
    Processing," because one of his key ideas was to use a simple data
    structure called a list for both code and data.
    #+END_EXAMPLE

  - [[http://www-formal.stanford.edu/jmc/history/lisp/node2.html][LISP prehistory - Summer 1956 through Summer 1958]].
  - [[http://www-formal.stanford.edu/jmc/history/lisp/lisp.html][History of Lisp]], John McCarthy, 1979--- "...we started by hand-compiling
    various functions into assembly language and writing subroutines to provide
    a LISP 'environment'."

  Originally specified in 1958, Lisp is the second-oldest high-level
  programming language in widespread use today, with Fortran being one year
  older.  Today, the best known general-purpose Lisp dialects are
  - Common Lisp,
  - Scheme, and
  - Clojure.


  Lisp was originally created as a practical mathematical notation for computer
  programs, influenced by the notation of Alonzo Church's lambda calculus.
  - Church, A., /The Calculi of Lambda Conversion/, Princeton University Press,
    Princeton, N.J., 1941.
  - [[https://web.archive.org/web/20011206080336/http://www.jetcafe.org/~jim/lambda.html][An Introduction to Lambda Calculus and Scheme]], by Jim Larson (1996)
  - [[http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf][Introduction to Lambda Calculus]] (pdf), by Barendregt and Barendsen (2000)
  - [[https://apps.dtic.mil/dtic/tr/fulltext/u2/a030751.pdf][Lambda: The Ultimate Imperative]] (pdf), by Guy Steele Jr. and Gerald Sussman
    (1976)
    - [[https://dspace.mit.edu/bitstream/handle/1721.1/5790/AIM-353.pdf][Cleaner pdf version]]
    - [[https://en.wikisource.org/wiki/Lambda:_The_Ultimate_Imperative][Wiki]] (partial) version
  - [[http://www.paulgraham.com/rootsoflisp.html][The Roots of Lisp]] \diams [[file:docs/jmc.ps][Full Article (.ps)]] \diams [[file:src/jmc.lisp][Source]]
    - Paul Graham, 2001--- In this article I'm going to try to explain in the
      simplest possible terms what McCarthy discovered. The point is not just
      to learn about an interesting theoretical result someone figured out
      forty years ago, but to show where languages are heading.
  - [[http://www.paulgraham.com/diff.html][What Made Lisp Different]]
    - Paul Graham, 2002--- When McCarthy designed Lisp in the late 1950s, it
      was a radical departure from existing languages, the most important of
      which was [[http://www.paulgraham.com/history.html][Fortran]].  Lisp embodied nine new ideas:
      1. Conditionals (invented by McCarthy in the course of developing Lisp)
      2. A function type (In Lisp, functions are first class objects)
      3. Recursion (Lisp was the first programming language to support it)
      4. A new concept of variables (In Lisp, all variables are effectively
         pointers)
      5. Garbage-collection (enough said)
      6. Programs composed of expressions (Lisp programs are trees of
         expressions, each of which returns a value)
      7. A symbol type (equality by pointer)
      8. A notation for code
      9. The whole language always available (There is no real distinction
         between read-time, compile-time, and runtime)
      #+ATTR_HTML: :textarea t :width 60
      #+BEGIN_EXAMPLE
      Over time, the default language, embodied in a succession of popular
      languages, has gradually evolved toward Lisp. 1-5 are now widespread. 6
      is starting to appear in the mainstream. Python has a form of 7, though
      there doesn't seem to be any syntax for it. 8, which (with 9) is what
      makes Lisp macros possible, is so far still unique to Lisp, perhaps
      because (a) it requires those parens, or something just as bad, and (b)
      if you add that final increment of power, you can no longer claim to have
      invented a new language, but only to have designed a new dialect of Lisp
      ; -)
      #+END_EXAMPLE
  - [[http://www.norvig.com/lisp_talk_final.hmt][Lisp: Where Do We Come From? What Are We? Where Are We Going?]]
    - Peter Norvig, NASA Ames Research Center, 1999

* Common Lisp

  #+ATTR_HTML: :width 25%
  [[file:img/lisp-logo.png]]

** What Common Lisp Is

*** Interactive Development

    Development in Common Lisp is interactive. There's no separate
    compile/run/debug cycle. Instead of that, the program is developed while it
    runs. Compilation is incremental, and functions can be created and updated
    on the fly. As the program is running, all objects are available and can be
    inspected all the time. This is much more than a simple REPL; the whole
    environment, from the IDE to the language is prepared for this type of
    development.

*** Robust

    Common Lisp is a carefully designed language with a long history. It was
    standarized in 1980 and the language has not changed since but it keeps up
    with the times thanks to its modability and metaprogramming
    capabilities. This makes it very likely that your program will continue to
    run unmodified for several years.

*** Expressive

    Being a meta language, Lisp approach to problem solving is to define idioms
    (small Domain Specific Languages) as close to the problem domain as
    possible. This results in very succint and declarative solutions, at a
    level which is difficult to achieve in other programming languages. CL
    flexibility also facilitates a bottom-up programming approach.

*** Fast

    Most Common Lisp compilers produce fast code. Programs can be type
    annotated and the compilers can apply optimizations based on them. CL also
    supports different levels of debugging, safety and speed. Performance is
    usually better than interpreted languages like Python and Ruby, and close
    to C in some cases.

*** Uniform

    Uniformity is present in both syntax and data structures. Everything being
    an S-expression, there are not many syntax oddities to think about. And
    Lisp main data structure is the list.

*** Multiparadigm

    Lisp implements and can adapt to several programming paradigms. It supports
    first class functions, closures and destructuring (among other things),
    commonly present in functional languages. And comes with CLOS, one of the
    most powerful object systems in existence. Support for other paradigms can
    often be implemented as a library as has been done for the logic paradigm.

*** Innovative and Advanced

    - Method combinations
    - Multiple dispatch
    - Multiple-values
    - Meta Object protocol.

** Features of Common Lisp

   [[http://random-state.net/features-of-common-lisp.html][Features of Common Lisp]] by Abhishek Reddy

** General Resources

   - [[https://common-lisp.net/][Common-Lisp dot Net]]
   - [[https://www.cliki.net/][CLiki]] --- The Common Lisp Wiki
   - [[https://lisp-lang.org/][Lisp-Lang dot Org]] --- Common Lisp on the Web

     Welcome to =lisp-lang.org=, the new home of Common Lisp on the
     web.  Previously, if someone wanted to learn Common Lisp, the
     language, their best bet was Peter Seibel’s [[http://www.gigamonkeys.com/book/][Practical Common
     Lisp]]. But the book, written in 2005, doesn’t cover setting up a
     modern Common Lisp environment: tools like [[https://www.quicklisp.org/beta/][Quicklisp]] and
     [[http://quickdocs.org/][Quickdocs]] are more recent inventions.

   - [[http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html][Common Lisp the Language (2nd Ed)]] by Guy L. Steele
   - [[http://www-formal.stanford.edu/jmc/][John McCarthy's Home Page]]
   - [[http://www.paulgraham.com/index.html][Paul Graham's Home Page]]
   - [[http://www.lispworks.com/documentation/common-lisp.html][ANSI Common Lisp Standard]]

     The Common Lisp HyperSpec™ is the acclaimed online version of the
     ANSI Common Lisp Standard.  The HyperSpec is derived from the
     official standard [fn:official-standard] with permission from
     ANSI and NCITS (previously known as X3). It contains the full
     text of the ANSI standard and ancillary information.

     #+ATTR_HTML: :textarea t :width 60
     #+BEGIN_EXAMPLE
     INCITS 226-1994[S2008]
     Promotes the portability of Common Lisp programs among a variety
     of data processing systems. It is a language specification aimed
     at an audience of implementors and knowledgeable programmers. It
     is neither a tutorial nor an implementation guide.
     #+END_EXAMPLE

   - [[https://mitpress.mit.edu/sites/default/files/sicp/index.html][Structure and Interpretation of Computer Programs]]
     - Abelson, Hal, Sussman, Julie, and Sussman, Jerry 1984--- SICP uses the
       Scheme dialect of Lisp. Scheme implementations are available for most
       common platforms. From MIT, we supply free implementations of the MIT
       Scheme programming environment. This page provides information on how to
       obtain copies of MIT Scheme as well as other implementations.

       MIT's entry-level computing subject, 6.001, emphasizes controlling the
       complexity of software systems through general techniques common to all
       engineering design: building abstractions to hide details and to
       separate specification from implementation, establishing conventional
       interfaces to allow the creation of standard modules, and shifting modes
       of linguistic description.  Students are brought to appreciate a
       diversity of major programming paradigms: data abstraction, rule-based
       systems, object-oriented programming, functional programming, logic
       programming, and constructing embedded interpreters. Beyond that, there
       is a central concern with the technology of implementing languages and
       linguistic support for programming paradigms. Students are encouraged to
       regard themselves as language designers and implementors rather than
       only language users.
     - [[https://people.eecs.berkeley.edu/~bh/sicp.html][Why /Structure and Interpretation of Computer Programs/ matters]], by Brian Harvey (2011)

     - https://web.mit.edu/alexmv/6.037/sicp.pdf--- PDF version
     - https://sarabander.github.io/sicp/--- HTML version
       #+ATTR_HTML: :textarea t :width 60
       #+BEGIN_EXAMPLE
       Sarabander's edition is definitely a huge credit to it's author: It
       isn't just a reprint of SICP; The text and it's font has been updated,
       many of the diagrams have been redone for clarity and the document and
       footnotes are hyperlinked.
       #+END_EXAMPLE
     - https://github.com/sarabander/sicp/--- HTML/EPUB3 sources
     - https://www.neilvandyke.org/sicp-texi/--- Texinfo format
     - https://github.com/zv/SICP-guile--- Guide
     - [[https://xuanji.appspot.com/isicp/][Interactive Version]] of Structure and Interpretation of Computer Programs by
       - [[https://github.com/IIIIllllIIIIllllIIIIllllIIIIllllIIIIll/isicp][Li Xuanji]] GitHub account

[fn:official-standard] The document ANSI INCITS 226-1994 (formerly
ANSI X3.226:1994) American National Standard for Programming Language
Common LISP is the official standard, available on paper [[http://www.techstreet.com/cgi-bin/detail?product_id=56214][here]]. Here is
a [[http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS+226-1994%255bS2008%255d][PDF version]].
     - [[http://cvberry.com/tech_writings/notes/common_lisp_standard_draft.html][Common Lisp Standard Draft]]

** Common Lisp Implementations

*** Armed Bear Common Lisp

    [[https://common-lisp.net/project/armedbear/][Armed Bear Common Lisp (ABCL)]]

    ABCL is a full implementation of the Common Lisp language
    featuring both an interpreter and a compiler, running in the
    JVM. Originally started to be a scripting language for the J
    editor, it now supports JSR-223 (Java scripting API): it can be a
    scripting engine in any Java application. Additionally, it can be
    used to implement (parts of) the application using Java to Lisp
    integration APIs.

**** FAQ

     [[https://common-lisp.net/project/armedbear/faq.shtml][Frequently Asked Questions]]

*** Steel Bank Common Lisp

    [[https://common-lisp.net/project/armedbear/][Steel Bank Common Lisp (SBCL)]] \diamond [[http://www.sbcl.org/manual/index.html][Online User Manual]]

    SBCL is a high performance Common Lisp compiler. It is open source
    free software, with a permissive license. In addition to the
    compiler and runtime system for ANSI Common Lisp, it provides an
    interactive environment including a debugger, a statistical
    profiler, a code coverage tool, and many other extensions. SBCL
    runs on a number of POSIX platforms, and experimentally on
    Windows.

    [[http://www.sbcl.org/platform-table.html][Download Page]] The most recent version of SBCL is 1.4.16, released January
    26, 2019.  New SBCL versions are usually released at the end of each month.

    [[http://www.sbcl.org/getting.html][Getting Started]]

*** Clozure Common Lisp

    [[https://ccl.clozure.com/][Clozure Common Lisp (CCL)]]

    CCL s a free Common Lisp implementation with a long history. Some
    distinguishing features of the implementation include fast
    compilation speed, native threads, a precise, generational,
    compacting garbage collector, and a convenient foreign-function
    interface.

*** Embeddable Common Lisp

    [[https://common-lisp.net/project/ecl/main.html][Embeddable Common Lisp (ECL)]]

    ECL is an interpreter of the Common-Lisp language as described in
    the X3J13 Ansi specification, featuring CLOS (Common-Lisp Object
    System), conditions, loops, etc, plus a translator to C, which can
    produce standalone executables.

    ECL supports the operating systems Linux, FreeBSD, NetBSD,
    OpenBSD, OS X, Solaris and Windows, running on top of the Intel,
    Sparc, Alpha, PowerPC and ARM processors.

*** Clasp

    [[https://github.com/clasp-developers/clasp][Clasp]]

    Clasp is a new Common Lisp implementation that seamlessly
    interoperates with C++ libraries and programs using LLVM for
    compilation to native code. This allows Clasp to take advantage of
    a vast array of preexisting libraries and programs, such as out of
    the scientific computing ecosystem. Embedding them in a Common
    Lisp environment allows you to make use of rapid prototyping,
    incremental development, and other capabilities that make it a
    powerful language.

*** CLISP

    [[https://clisp.sourceforge.io/][CLISP]]

    GNU CLISP is a Common Lisp implementation by Bruno Haible, then of
    Karlsruhe University, and Michael Stoll, then of Munich
    University, both in Germany. It implements the language described
    in the ANSI Common Lisp standard with many extensions.

** Writings on Lisp

   - [[http://www-formal.stanford.edu/jmc/recursive.html][Recursive Functions of Symbolic Expressions and Their Computation
     by Machine, Part I]]
     - John McCarthy, Massachusetts Institute of Technology,
       Cambridge, Mass., April 1960
   - [[http://www-formal.stanford.edu/jmc/lisp20th.html][Lisp---Notes on its Past and Future]]
     - John McCarthy, 1980
   - [[http://www.cs.cmu.edu/~dst/LispBook/index.html][Common Lisp: A Gentle Introduction to Symbolic Computation]]
     - David S. Touretzky, 1990--- Excellent and comprehensivee introductory
       text on Lisp and symbolic computation.
     - [[http://www-2.cs.cmu.edu/~dst/Lisp/][Software]]
   - [[http://www.paulgraham.com/onlisp.html][On Lisp]]
     - Paul Graham, 1993--- An in-depth treatment of macros, but not recommended
       as a first Common Lisp book, since it is slightly pre-ANSI so you need
       to be on your guard against non-standard usages, and since it doesn’t
       really even try to cover the language as a whole, focusing solely on
       macros.
   - [[http://www.paulgraham.com/acl.html][ANSI Common Lisp]]
     - Paul Graham, 1995--- ANSI Common Lisp combines an introduction to Lisp
       programming, and a convenient, up-to-date reference manual for ANSI
       Common Lisp. Beginners will find that its careful explanations and
       interesting examples make Lisp programming easy to learn. Professional
       programmers will appreciate its thorough, practical approach.
     - [[https://7chan.org/pr/src/ANSI_Common_Lisp_-_Paul_Graham.pdf][Link]]
     - [[https://github.com/clojurians-org/lisp-ebook/blob/master/ANSI%2520Common%2520LISP.pdf][Link]]
   - [[http://www.gigamonkeys.com/book/][Practical Common Lisp]]
     - Peter Seibel---
       An excellent introduction to the language, covering both the basics and
       “advanced topics” like macros, CLOS, and packages. Available both in
       print format and on the web.
       - Source Files :: [[./PracticalCL/practicals-1.0.3/]]
   - [[http://web.archive.org/web/20110709224308/http://psg.com/~dlamkins/sl/cover.html][Successful Lisp: How to Understand and Use Common Lisp]]
     - David B. Lamkins, 2004--- Provides an overview of Common Lisp for the
       working programmer.  Introduces key concepts in an easy-to-read format.
   - [[http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html][Common Lisp the Language]] (2nd Edition)
     - Guy L. Steele Jr., Second Edition 1989--- This book is intended to be a
       language specification rather than an implementation specification
       (although implementation notes are scattered throughout the text). It
       defines a set of standard language concepts and constructs that may be
       used for communication of data structures and algorithms in the Common
       Lisp dialect. This set of concepts and constructs is sometimes referred
       to as the ``core Common Lisp language'' because it contains conceptually
       necessary or important features.
     - The authoritative Lisp reference book.  Not much of a text book.
   - [[https://franz.com/resources/educational_resources/cooper.book.pdf][Basic Lisp Techniques]]
     - David J. Cooper, Jr., 2011--- Introduction to Lisp programming with an
       emphasis on the [[https://franz.com/downloads/clp/survey][Franz Allegro Common Lisp]] environment, Emacs and Unix.
       - [[https://franz.com/support/documentation/current/doc/][Allegro CL Documentation]]
   - [[http://lispcookbook.github.io/cl-cookbook/][The Common Lisp Cookbook]]
     - This is a collaborative project that aims to provide for Common Lisp
       something similar to the [[http://www.oreilly.com/catalog/cookbook/][Perl Cookbook]] published by O’Reilly. More
       details about what it is and what it isn’t can be found in this [[http://groups.google.com/groups?threadm=m3it9soz3m.fsf%2540bird.agharta.de][thread]]
       from [[news:comp.lang.lisp][comp.lang.lisp]].
     - [[https://github.com/LispCookbook/cl-cookbook][LispCookbook/cl-cookbook]]
   - Object-Oriented Programming In Common Lisp
     - Sonya Keene, 1989--- With the exception of Practical Common Lisp most
       introductory books don’t emphasize CLOS. This one does. Even if you’re
       very knowledgeable about object oriented programming in the abstract,
       it’s worth looking at this book if you want to do any OO in Common
       Lisp. Some abstractions in CLOS (especially multiple dispatch) go
       beyond anything you’ll see in most OO systems, and there are a number
       of lesser differences as well. This book tends to help with the culture
       shock.
   - Art Of Metaobject Programming
     - Gregor Kiczales et al.
     - [[https://clos-mop.hexstreamsoft.com][Common Lisp Object System Metaobject Protocol]], chapters 5 and 6
     - [[https://github.com/Hexstream/clos-mop.hexstreamsoft.com][Hexstream/clos-mop.hexstreamsoft.com]] -- This project is an
       "Hexstreamification" of Robert Strandh's public domain HTML version of
       the CLOS MOP. It is by far the best version of the CLOS MOP
       specification as of 15 october 2017.
   - [[https://github.com/norvig/paip-lisp][Paradigms Of Artificial Intelligence Programming]]
     - Peter Norvig, 1992--- Good information on general Common Lisp
       programming, and many nontrivial examples. Whether or not your work is
       AI, it’s a very good book to look at.  This is an open-source repository
       for the book /Paradigms of Artificial Intelligence Programming: Case
       Studies in Common Lisp/ by Peter Norvig (1992), and the code contained
       therein. The copyright has reverted to the author, who has shared it
       here under MIT license.
     - Lisp code for the textbook /Paradigms of Artificial Intelligence
       Programming/
   - HexstreamSoft Programming articles --- Mostly about Common Lisp.
     - [[https://www.hexstreamsoft.com/articles/notes-tips-standard-common-lisp-symbols/][Notes and tips: Standard Common Lisp symbols]] --- Informal yet helpful
       information on the standard symbols and their bindings.
     - [[https://www.hexstreamsoft.com/articles/getting-started-with-the-clhs/][Getting Started with the Common Lisp HyperSpec]] --- Learn about the
       definitive Common Lisp reference and how to use it more effectively.
     - [[https://www.hexstreamsoft.com/articles/common-lisp-format-reference/][Common Lisp FORMAT reference]]
   - [[http://landoflisp.com/][Land of Lisp]]
     - Conrad Barski, 2010--- Learn to Program in Lisp, One Game at a Time!
       Barski's thesis is that Lisp is a refreshing alternative - it offers
       BASIC's ease of getting started (get a prompt, type in code, and it
       works), while providing a combination of modern features unmatched in
       other programming languages.  Land of Lisp builds up to cover topics
       like graph theory, search algorithms, functional and network
       programming, and domain-specific languages. All throughout, the book
       emphasizes various techniques for doing I/O. The topics covered will
       leave the reader with a solid understanding of what modern programming
       entails and a good basis from which to explore either application or
       lower-level systems programming.

       The most unintentionally impressive aspect of Land of Lisp is that it
       manages to completely explain web programming. No more hiding behind
       complicated software stacks and impenetrable web server packages -
       chapter 13, titled "Let's Create a Web Server!," does exactly what it
       promises, in only 15 pages. Later chapters introduce HTML and SVG to
       build a graphical game as a web application. If nothing else, this book
       will leave the reader with all the necessary basic skills and total
       confidence in their understanding to build real-world web applications.
     - [[http://landoflisp.com/source.html][Source Code]]
     - [[http://landoflisp.com/errata.html][Errata]]
   - [[file:lisplang.html#orgfd84add][The Little LISPer]] (3rd Edition)
     - Friedman and Felleisen, 1989--- In 1974, Daniel P. Friedman published a
       little book called /The Little LISPer/. It was only 68 pages, but it did
       a remarkable thing: It could teach you to think recursively. ... it
       wasn't really about LISP, it was about recursive functions. You didn't
       need a computer in order to work through the exercises.  /The Little
       Schemer/ (Fourth Edition), updated by Friedman and Matthias Felleisen,
       now conforms more closely to a real programming language, Scheme, and
       has new chapters which delve much deeper into recursive function theory
       and language processors.
   - [[https://pages.lip6.fr/Christian.Queinnec/WWW/LiSP.html][Lisp In Small Pieces]]
     - Christian Queinnec, 1996

** Languages Derived from Lisp

*** Scheme \diams Racket \diams Clojure

    - [[https://www.scheme.com/tspl4/][The Scheme Programming Language]] (2009 4th Edition) by R. Kent Dybvig
      - Originally designed at M.I.T., where it was quickly put to use as a
        teaching language for undergraduate computer science courses, Scheme
        has always been aimed at a different language niche than Common
        Lisp. In particular, Scheme's designers have focused on keeping the
        core language as small and as simple as possible. This has obvious
        benefits for a teaching language and also for programming language
        researchers who like to be able to formally prove things about
        languages.
      - [[https://7chan.org/pr/src/The_Little_Schemer_4th_2.pdf][The Little Schemer]] (4th Edition 1996)
        - Friedman and Felleisen (forward by Sussman)
        - https://www.viget.com/articles/the-little-schemer-will-expand-blow-your-mind/
        - [[https://crockford.com/javascript/little.html][The Little JavaScripter]]
          - Douglas Crockford--- JavaScript has much in common with Scheme. It
            is a dynamic language. It has a flexible datatype (arrays) that can
            easily simulate s-expressions. And most importantly, functions are
            lambdas.  Because of this deep similarity, all of the functions in
            /The Little Schemer/ can be written in JavaScript.
      - [[https://www.cs.unm.edu/~williams/cs357/springer-friedman.pdf][Scheme and the Art of Programming]]
        - Springer and Friedman, 1989
    - [[https://racket-lang.org/][The Racket Programming Language]]
      - [[https://htdp.org/][How to Design Programs]] January 6th, 2018 10:01:30pm
        - Felleisen, Findler, Flatt & Krishnamurthi
      - [[http://www.eopl3.com/][Essentials of Programming Languages]] (3rd Edition)
        - [[https://github.com/mwand/eopl3][GitHub Site]] --- The code dates from 2009. It has now been updated and
          should run right out of the box on Racket version 6.11.
      - [[https://course.ccs.neu.edu/cs5010f17/][CS 5010: Program Design Paradigms]] 2017
    - [[https://clojure.org/][The Clojure Programming Language]]
      - [[https://github.com/clojurians-org][Clojurians]]

** Emacs

*** SLIME The Superior Lisp Interaction Mode for Emacs

    SLIME extends Emacs with support for interactive programming in Common
    Lisp. The features are centered around =slime-mode=, an Emacs minor-mode
    that complements the standard =lisp-mode=. While =lisp-mode= supports
    editing Lisp source files, =slime-mode= adds support for interacting with a
    running Common Lisp process for compilation, debugging, documentation
    lookup, and so on.

    [[https://common-lisp.net/project/slime/doc/html/][SLIME Manual]]

    [[https://www.common-lisp.net/project/slime/][SLIME Home]]

    [[https://github.com/slime/slime][SLIME GitHub Page]]

**** Quick Setup

     1. Setup [[https://melpa.org/#/getting-started][MELPA]] repository
     2. Install SLIME using:
        : M-x package-install RET slime RET
     3. Add the following lines to your ~/.emacs file:

     #+BEGIN_SRC lisp -n
     ;; Set your lisp system and, optionally, some contribs
     (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
     (setq slime-contribs '(slime-fancy))
     #+END_SRC

     4. [@4]Fire up and connect to an inferior Lisp:
        : M-x slime
     5. SLIME will now automatically be available in your Lisp source buffers.
     6. SLIME comes with additional contributed packages or
        "contribs". Contribs can be selected via the =slime-contribs= list.
        - The most-often used contrib is ~slime-fancy~, which primarily
          installs a popular set of other contributed packages. It includes a
          better REPL, and many more nice features.

**** Features

     - Slime Mode :: An Emacs minor-mode to enhance lisp-mode with:
       - Code evaluation, compilation, and macroexpansion.
       - Online documentation (~describe~, ~apropos~, ~hyperspec~).
       - Definition finding (aka Meta-Point aka ~M-~.).
       - Symbol and package name completion.
       - Automatic macro indentation based on ~&body~.
       - Cross-reference interface (WHO-CALLS, etc).
       - ... and more.
     - SLDB :: Common Lisp debugger with an Emacs-based user interface.
     - REPL :: The Read-Eval-Print Loop ("top-level") is written in Emacs Lisp
               for tighter integration with Emacs. The REPL also has builtin
               "shortcut" commands similar those of the McCLIM listener.
     - Compilation Notes :: SLIME is able to take compiler messages and
          annotate them directly into source buffers.
     - Inspector :: Interactive object-inspector in an Emacs buffer.

**** Resources

     [[https://www.common-lisp.net/project/slime/doc/html/][HTML Manual]] \diamond [[https://www.common-lisp.net/project/slime/doc/slime.pdf][PDF Manual]]

     Marco Baringer's [[https://www.youtube.com/watch?v=NUpAvqa5hQw][SLIME tutorial]] from 2005

     Baggers' [[https://www.youtube.com/watch?v=sBcPNr1CKKw][Emacs with SLIME]] — Really useful keyboard shortcuts from 2014.

* Query

  If you, being a computer engineer, where given the opportunity to accept or
  reject the gift of the most powerful computer on the planet, what would be
  some reasons why you would reject it?  Would the way it looks be one of them?

  - "I'm sorry, it just looks so..."

  #+BEGIN_EXAMPLE
  So if Lisp makes you a better programmer, like [Eric Raymond] says, why
  wouldn't you want to use it? If a painter were offered a brush that would
  make him a better painter, it seems to me that he would want to use it in all
  his paintings, wouldn't he?  What he says about Lisp is pretty much the
  conventional wisdom. But there is a contradiction in the conventional wisdom:
  Lisp will make you a better programmer, and yet you won't use it.  Why not?

  What's so great about Lisp? And if Lisp is so great, why doesn't everyone use
  it? These sound like rhetorical questions, but actually they have
  straightforward answers. Lisp is so great not because of some magic quality
  visible only to devotees, but because it is simply the most powerful language
  available. And the reason everyone doesn't use it is that programming
  languages are not merely technologies, but habits of mind as well, and
  nothing changes slower.
  #+END_EXAMPLE
  ---Paul Graham, /[[file:lisplang.html#org6990e82][Want to Start a Startup?]]/, 2001, 2003

* HTML EXPORT SETUP                                                :noexport:
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:t tex:t H:5 ':t
#+HTML_DOCTYPE: xhtml5
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:LISt Processor
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:
